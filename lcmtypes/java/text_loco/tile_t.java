/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package text_loco;
 
import java.io.*;
import java.nio.*;
import java.util.*;
import lcm.lcm.*;
 
public final class tile_t implements lcm.lcm.LCMEncodable
{
    public long utime;
    public double normal_direction[];
    public double origin[];
    public double x_axis_direction[];
    public double y_axis_direction[];
    public double width;
    public double height;
 
    public tile_t()
    {
        normal_direction = new double[3];
        origin = new double[3];
        x_axis_direction = new double[3];
        y_axis_direction = new double[3];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x015bbb03b9fa8d9dL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class>());
    }
 
    public static long _hashRecursive(ArrayList<Class> classes)
    {
        if (classes.contains(text_loco.tile_t.class))
            return 0L;
 
        classes.add(text_loco.tile_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.utime); 
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.normal_direction[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.origin[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.x_axis_direction[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.y_axis_direction[a]); 
        }
 
        outs.writeDouble(this.width); 
 
        outs.writeDouble(this.height); 
 
    }
 
    public tile_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public tile_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static text_loco.tile_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        text_loco.tile_t o = new text_loco.tile_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.utime = ins.readLong();
 
        this.normal_direction = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.normal_direction[a] = ins.readDouble();
        }
 
        this.origin = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.origin[a] = ins.readDouble();
        }
 
        this.x_axis_direction = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.x_axis_direction[a] = ins.readDouble();
        }
 
        this.y_axis_direction = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.y_axis_direction[a] = ins.readDouble();
        }
 
        this.width = ins.readDouble();
 
        this.height = ins.readDouble();
 
    }
 
    public text_loco.tile_t copy()
    {
        text_loco.tile_t outobj = new text_loco.tile_t();
        outobj.utime = this.utime;
 
        outobj.normal_direction = new double[(int) 3];
        System.arraycopy(this.normal_direction, 0, outobj.normal_direction, 0, 3); 
        outobj.origin = new double[(int) 3];
        System.arraycopy(this.origin, 0, outobj.origin, 0, 3); 
        outobj.x_axis_direction = new double[(int) 3];
        System.arraycopy(this.x_axis_direction, 0, outobj.x_axis_direction, 0, 3); 
        outobj.y_axis_direction = new double[(int) 3];
        System.arraycopy(this.y_axis_direction, 0, outobj.y_axis_direction, 0, 3); 
        outobj.width = this.width;
 
        outobj.height = this.height;
 
        return outobj;
    }
 
}

