/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package text_loco;
 
import java.io.*;
import java.nio.*;
import java.util.*;
import lcm.lcm.*;
 
public final class tile_set_t implements lcm.lcm.LCMEncodable
{
    public long utime;
    public long linked_image_utime;
    public int num_tiles;
    public text_loco.tile_t tiles[];
 
    public tile_set_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xe26757c7e01cd7f8L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class>());
    }
 
    public static long _hashRecursive(ArrayList<Class> classes)
    {
        if (classes.contains(text_loco.tile_set_t.class))
            return 0L;
 
        classes.add(text_loco.tile_set_t.class);
        long hash = LCM_FINGERPRINT_BASE
             + text_loco.tile_t._hashRecursive(classes)
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.utime); 
 
        outs.writeLong(this.linked_image_utime); 
 
        outs.writeInt(this.num_tiles); 
 
        for (int a = 0; a < this.num_tiles; a++) {
            this.tiles[a]._encodeRecursive(outs); 
        }
 
    }
 
    public tile_set_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public tile_set_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static text_loco.tile_set_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        text_loco.tile_set_t o = new text_loco.tile_set_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.utime = ins.readLong();
 
        this.linked_image_utime = ins.readLong();
 
        this.num_tiles = ins.readInt();
 
        this.tiles = new text_loco.tile_t[(int) num_tiles];
        for (int a = 0; a < this.num_tiles; a++) {
            this.tiles[a] = text_loco.tile_t._decodeRecursiveFactory(ins);
        }
 
    }
 
    public text_loco.tile_set_t copy()
    {
        text_loco.tile_set_t outobj = new text_loco.tile_set_t();
        outobj.utime = this.utime;
 
        outobj.linked_image_utime = this.linked_image_utime;
 
        outobj.num_tiles = this.num_tiles;
 
        outobj.tiles = new text_loco.tile_t[(int) num_tiles];
        for (int a = 0; a < this.num_tiles; a++) {
            outobj.tiles[a] = this.tiles[a].copy();
        }
 
        return outobj;
    }
 
}

