/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package text_loco;
 
import java.io.*;
import java.nio.*;
import java.util.*;
import lcm.lcm.*;
 
public final class reference_line_segment_t implements lcm.lcm.LCMEncodable
{
    public double start[];
    public double end[];
    public double reference_origin[];
 
    public reference_line_segment_t()
    {
        start = new double[3];
        end = new double[3];
        reference_origin = new double[3];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xfc2d743d6fad96faL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class>());
    }
 
    public static long _hashRecursive(ArrayList<Class> classes)
    {
        if (classes.contains(text_loco.reference_line_segment_t.class))
            return 0L;
 
        classes.add(text_loco.reference_line_segment_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.start[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.end[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.reference_origin[a]); 
        }
 
    }
 
    public reference_line_segment_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public reference_line_segment_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static text_loco.reference_line_segment_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        text_loco.reference_line_segment_t o = new text_loco.reference_line_segment_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.start = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.start[a] = ins.readDouble();
        }
 
        this.end = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.end[a] = ins.readDouble();
        }
 
        this.reference_origin = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.reference_origin[a] = ins.readDouble();
        }
 
    }
 
    public text_loco.reference_line_segment_t copy()
    {
        text_loco.reference_line_segment_t outobj = new text_loco.reference_line_segment_t();
        outobj.start = new double[(int) 3];
        System.arraycopy(this.start, 0, outobj.start, 0, 3); 
        outobj.end = new double[(int) 3];
        System.arraycopy(this.end, 0, outobj.end, 0, 3); 
        outobj.reference_origin = new double[(int) 3];
        System.arraycopy(this.reference_origin, 0, outobj.reference_origin, 0, 3); 
        return outobj;
    }
 
}

